#include "HoggleFunctions.h"

string NumberToString ( int Number )
{
    stringstream ss;
    ss << Number;
    return ss.str();
}

bool WordSolver(int r, int c, vector<int>&rows,vector<int>&columns,
                string remain)
{
    bool found=false;
    if(remain=="")
    {
        return true;
    }
    string tempremain;
    tempremain=remain;

    if((r==0||r==1)&&c<DiceInRow(r))
    {
        if(c-1<DiceInRow(r)&&c-1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r,c-1)==remain[0])
                {
                    rows.push_back(r);
                    columns.push_back(c-1);
                    if(WordSolver(r,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c+1<DiceInRow(r)&&c+1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r,c+1)==remain[0])
                {
                    rows.push_back(r);
                    columns.push_back(c+1);
                    if(WordSolver(r,c+1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c-1<DiceInRow(r-1)&&c-1>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r-1,c-1)==remain[0])
                {
                    rows.push_back(r-1);
                    columns.push_back(c-1);
                    if(WordSolver(r-1,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c<DiceInRow(r-1)&&c>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r-1,c)==remain[0])
                {
                    rows.push_back(r-1);
                    columns.push_back(c);
                    if(WordSolver(r-1,c,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c<DiceInRow(r+1)&&c>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r+1,c)==remain[0])
                {
                    rows.push_back(r+1);
                    columns.push_back(c);
                    if(WordSolver(r+1,c,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c+1<DiceInRow(r+1)&&c+1>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r+1,c+1)==remain[0])
                {
                    rows.push_back(r+1);
                    columns.push_back(c+1);
                    if(WordSolver(r+1,c+1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
    }
    else if((r==3||r==4)&&c<DiceInRow(r))
    {
        if(c-1<DiceInRow(r)&&c-1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r,c-1)==remain[0])
                {
                    rows.push_back(r);
                    columns.push_back(c-1);
                    if(WordSolver(r,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c+1<DiceInRow(r)&&c+1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r,c+1)==remain[0])
                {
                    rows.push_back(r);
                    columns.push_back(c+1);
                    if(WordSolver(r,c+1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c<DiceInRow(r-1)&&c>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r-1,c)==remain[0])
                {
                    rows.push_back(r-1);
                    columns.push_back(c);
                    if(WordSolver(r-1,c,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c+1<DiceInRow(r-1)&&c+1>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r-1,c+1)==remain[0])
                {
                    rows.push_back(r-1);
                    columns.push_back(c+1);
                    if(WordSolver(r-1,c+1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c-1<DiceInRow(r+1)&&c-1>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r+1,c-1)==remain[0])
                {
                    rows.push_back(r+1);
                    columns.push_back(c-1);
                    if(WordSolver(r+1,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c<DiceInRow(r+1)&&c>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r+1,c)==remain[0])
                {
                    rows.push_back(r+1);
                    columns.push_back(c);
                    if(WordSolver(r+1,c,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
    }
    else if(r==2&&c<DiceInRow(r) )
    {
        if(c-1<DiceInRow(r)&&c-1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r,c-1)==remain[0])
                {
                    rows.push_back(r);
                    columns.push_back(c-1);
                    if(WordSolver(r,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c+1<DiceInRow(r)&&c+1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r,c+1)==remain[0])
                {
                    rows.push_back(r);
                    columns.push_back(c+1);
                    if(WordSolver(r,c+1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c<DiceInRow(r-1)&&c>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r-1,c)==remain[0])
                {
                    rows.push_back(r-1);
                    columns.push_back(c);
                    if(WordSolver(r-1,c,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c-1<DiceInRow(r-1)&&c-1>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r-1,c-1)==remain[0])
                {
                    rows.push_back(r-1);
                    columns.push_back(c-1);
                    if(WordSolver(r-1,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c-1<DiceInRow(r+1)&&c-1>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r+1,c-1)==remain[0])
                {
                    rows.push_back(r+1);
                    columns.push_back(c-1);
                    if(WordSolver(r+1,c-1,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
        if(c<DiceInRow(r+1)&&c>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                if(LetterAt(r+1,c)==remain[0])
                {
                    rows.push_back(r+1);
                    columns.push_back(c);
                    if(WordSolver(r+1,c,rows,columns,tempremain.substr(1))==true)
                    {
                        return true;
                    }
                    else
                    {
                        rows.pop_back();
                        columns.pop_back();
                    }
                }
            }
        }
    }
    return false;
}


void ComputerTurn(int r, int c, vector<int>rows,vector<int>columns,
                  string word, Lexicon*lex,vector<string>&playedWords)
{
    vector<int>temprow;
    vector<int>tempcol;
    bool found=false;
    if(!lex->containsPrefix(word))
    {
        return;
    }
    if(find(playedWords.begin(),playedWords.end(),word)!=playedWords.end())
    {
        return;
    }
    if(lex->containsWord(word)&&word.length()>=3)
    {
        for(int i=0; i<rows.size(); i++)
        {
            HighlightHex(rows[i], columns[i], true); // highlighting on
            Pause(0.1);
            HighlightHex(rows[i], columns[i], false); // highlighting off
        }
        playedWords.push_back(word);
        RecordNewWord(word,Computer);
    }

    if((r==0||r==1)&&c<DiceInRow(r))
    {
        if(c-1<DiceInRow(r)&&c-1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r);
                tempcol.push_back(c-1);
                ComputerTurn(r,c-1,temprow,tempcol,word+LetterAt(r,c-1),lex,playedWords);

            }
        }
        if(c+1<DiceInRow(r)&&c+1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r);
                tempcol.push_back(c+1);
                ComputerTurn(r,c+1,temprow,tempcol,word+LetterAt(r,c+1),lex,playedWords);
            }
        }
        if(c-1<DiceInRow(r-1)&&c-1>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r-1);
                tempcol.push_back(c-1);
                ComputerTurn(r-1,c-1,temprow,tempcol,word+LetterAt(r-1,c-1),lex,playedWords);
            }
        }
        if(c<DiceInRow(r-1)&&c>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r-1);
                tempcol.push_back(c);
                ComputerTurn(r-1,c,temprow,tempcol,word+LetterAt(r-1,c),lex,playedWords);
            }
        }
        if(c<DiceInRow(r+1)&&c>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r+1);
                tempcol.push_back(c);
                ComputerTurn(r+1,c,temprow,tempcol,word+LetterAt(r+1,c),lex,playedWords);
            }
        }
        if(c+1<DiceInRow(r+1)&&c+1>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r+1);
                tempcol.push_back(c+1);
                ComputerTurn(r+1,c+1,temprow,tempcol,word+LetterAt(r+1,c+1),lex,playedWords);
            }
        }
    }
    else if((r==3||r==4)&&c<DiceInRow(r))
    {
        if(c-1<DiceInRow(r)&&c-1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r);
                tempcol.push_back(c-1);
                ComputerTurn(r,c-1,temprow,tempcol,word+LetterAt(r,c-1),lex,playedWords);
            }
        }
        if(c+1<DiceInRow(r)&&c+1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r);
                tempcol.push_back(c+1);
                ComputerTurn(r,c+1,temprow,tempcol,word+LetterAt(r,c+1),lex,playedWords);
            }
        }
        if(c<DiceInRow(r-1)&&c>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r-1);
                tempcol.push_back(c);
                ComputerTurn(r-1,c,temprow,tempcol,word+LetterAt(r-1,c),lex,playedWords);
            }
        }
        if(c+1<DiceInRow(r-1)&&c+1>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r-1);
                tempcol.push_back(c+1);
                ComputerTurn(r-1,c+1,temprow,tempcol,word+LetterAt(r-1,c+1),lex,playedWords);
            }
        }
        if(c-1<DiceInRow(r+1)&&c-1>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r+1);
                tempcol.push_back(c-1);
                ComputerTurn(r+1,c-1,temprow,tempcol,word+LetterAt(r+1,c-1),lex,playedWords);
            }
        }
        if(c<DiceInRow(r+1)&&c>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r+1);
                tempcol.push_back(c);
                ComputerTurn(r+1,c,temprow,tempcol,word+LetterAt(r+1,c),lex,playedWords);
            }
        }
    }
    else if(r==2&&c<DiceInRow(r) )
    {
        if(c-1<DiceInRow(r)&&c-1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r);
                tempcol.push_back(c-1);
                ComputerTurn(r,c-1,temprow,tempcol,word+LetterAt(r,c-1),lex,playedWords);
            }
        }
        if(c+1<DiceInRow(r)&&c+1>=0&&r>=0&&r<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r&&columns[i]==c+1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r);
                tempcol.push_back(c+1);
                ComputerTurn(r,c+1,temprow,tempcol,word+LetterAt(r,c+1),lex,playedWords);
            }
        }
        if(c<DiceInRow(r-1)&&c>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r-1);
                tempcol.push_back(c);
                ComputerTurn(r-1,c,temprow,tempcol,word+LetterAt(r-1,c),lex,playedWords);
            }
        }
        if(c-1<DiceInRow(r-1)&&c-1>=0&&r-1>=0&&r-1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r-1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r-1);
                tempcol.push_back(c-1);
                ComputerTurn(r-1,c-1,temprow,tempcol,word+LetterAt(r-1,c-1),lex,playedWords);
            }
        }
        if(c-1<DiceInRow(r+1)&&c-1>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c-1)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r+1);
                tempcol.push_back(c-1);
                ComputerTurn(r+1,c-1,temprow,tempcol,word+LetterAt(r+1,c-1),lex,playedWords);
            }
        }
        if(c<DiceInRow(r+1)&&c>=0&&r+1>=0&&r+1<5)
        {
            for(int i=0; i<rows.size(); i++)
            {
                if(rows[i]==r+1&&columns[i]==c)
                {
                    found=true;
                    break;
                }
                else
                {
                    found=false;
                }
            }
            if(!found)
            {
                temprow=rows;
                tempcol=columns;
                temprow.push_back(r+1);
                tempcol.push_back(c);
                ComputerTurn(r+1,c,temprow,tempcol,word+LetterAt(r+1,c),lex,playedWords);
            }
        }
    }
    return;
}
